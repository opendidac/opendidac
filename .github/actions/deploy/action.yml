name: 'Deployment Procedure'
description: 'Common deployment steps'
inputs:
  POSTGRES_USER:
    description: 'PostgreSQL user'
    required: true
  POSTGRES_PASSWORD:
    description: 'PostgreSQL password'
    required: true
  POSTGRES_DB:
    description: 'PostgreSQL database'
    required: true
  NEXTAUTH_URL:
    description: 'NextAuth URL'
    required: true
  NEXTAUTH_SECRET:
    description: 'NextAuth Secret'
    required: true
  NEXTAUTH_KEYCLOAK_CLIENT_ID:
    description: 'NextAuth Keycloak ID'
    required: true
  NEXTAUTH_KEYCLOAK_CLIENT_SECRET:
    description: 'NextAuth Keycloak Secret'
    required: true
  NEXTAUTH_KEYCLOAK_ISSUER_BASE_URL:
    description: 'NextAuth Keycloak Issuer Base URL'
    required: true
  NEXTAUTH_SWITCH_CLIENT_ID:
    description: 'NextAuth Switch ID'
    required: true
  NEXTAUTH_SWITCH_CLIENT_SECRET:
    description: 'NextAuth Switch Secret'
    required: true
  SSL_FULLCHAIN:
    description: 'SSL Fullchain'
    required: true
  SSL_PRIVKEY:
    description: 'SSL Privkey'
    required: true    
    
runs:
  using: 'composite'
  steps:
    
    - name: Move checked-out code to production folder
      run: |
        rsync -av --progress $GITHUB_WORKSPACE/ /home/heiguser/eval/ --exclude .git
      shell: bash

    - name: Generate environment files
      run: |
        cd /home/heiguser/eval
        # It is important to poivide DATABASE_URL in the web/.env file, it is used by prisma.
        echo "DATABASE_URL=postgresql://${{ inputs.POSTGRES_USER }}:${{ inputs.POSTGRES_PASSWORD }}@db:5432/${{ inputs.POSTGRES_DB }}" > web/.env
        
        mkdir -p deploy/db
        echo "POSTGRES_USER=${{ inputs.POSTGRES_USER }}" > deploy/db/.env.db.prod
        echo "POSTGRES_PASSWORD=${{ inputs.POSTGRES_PASSWORD }}" >> deploy/db/.env.db.prod
        echo "POSTGRES_DB=${{ inputs.POSTGRES_DB }}" >> deploy/db/.env.db.prod
        
        echo "NEXTAUTH_URL=${{inputs.NEXTAUTH_URL}}" > web/.env.production
        echo "NEXTAUTH_SECRET=${{ inputs.NEXTAUTH_SECRET }}" >> web/.env.production
        
        echo "NEXTAUTH_KEYCLOAK_CLIENT_ID=${{ inputs.NEXTAUTH_KEYCLOAK_CLIENT_ID }}" >> web/.env.production
        echo "NEXTAUTH_KEYCLOAK_CLIENT_SECRET=${{ inputs.NEXTAUTH_KEYCLOAK_CLIENT_SECRET }}" >> web/.env.production
        echo "NEXTAUTH_KEYCLOAK_ISSUER_BASE_URL=${{ inputs.NEXTAUTH_KEYCLOAK_ISSUER_BASE_URL }}" >> web/.env.production

        echo "NEXTAUTH_SWITCH_ORGANIZATION_DOMAINS=heig-vd.ch,hes-so.ch,master.hes-so.ch" >> web/.env.production
        echo "NEXTAUTH_SWITCH_CLIENT_ID=${{ inputs.NEXTAUTH_SWITCH_CLIENT_ID }}" >> web/.env.production
        echo "NEXTAUTH_SWITCH_CLIENT_SECRET=${{ inputs.NEXTAUTH_SWITCH_CLIENT_SECRET }}" >> web/.env.production
        
      shell: bash

    - name: SSL certificates for https
      run: |
        # The SSL certificate keys are provided by the infrastructure team
        cd /home/heiguser/eval
        mkdir -p deploy/ssl
        echo "${{ inputs.SSL_FULLCHAIN }}" > deploy/ssl/fullchain.pem
        echo "${{ inputs.SSL_PRIVKEY }}" > deploy/ssl/privkey.pem
      shell: bash
        
    - name: Build Custom Docker images
      run: |
        # SQL Fluff is out custom images used for linting DB question queries, it is not published on Docker Hub
        cd /home/heiguser/eval
        docker build -t database-sqlfluff ./deploy/docker-images/database-sqlfluff
      shell: bash

    - name: Build Docker Compose Images
      run: |
        cd /home/heiguser/eval/deploy
        docker compose build
      shell: bash

    - name: Start Docker Compose Services
      run: |
        cd /home/heiguser/eval/deploy
        docker compose up -d
      shell: bash

    - name: Create Database Dump
      run: |
        mkdir -p /home/heiguser/db_dumps
        cd /home/heiguser/db_dumps
        backup_date=$(date +"%Y-%m-%d_%H-%M-%S")
        backup_filename="pg_workflow_backup_$backup_date.sql"

        # Get the database container ID
        container_db_id=$(docker ps -qf "name=eval-db-")

        if [ -z "$container_db_id" ]; then
          echo "Database container is not running! Skipping backup step."
          exit 0  # Continue execution even if this step fails
        fi

        # Try to dump the database
        if ! docker exec $container_db_id pg_dump -U ${{ inputs.POSTGRES_USER }} -d ${{ inputs.POSTGRES_DB }} -F c > $backup_filename; then
          echo "Database dump failed. This might be the first run."
          exit 0  # Continue even if dumping fails
        fi

        echo "Database dump completed successfully."
      shell: bash
      continue-on-error: true  # Ensures the workflow continues


    - name: Run Prisma Migrations
      run: |
        container_id=$(docker ps -qf "name=eval-web-")
        docker exec $container_id npx prisma migrate deploy
      shell: bash
      

    - name: Restart Nginx container - To reload the SSL certificates
      run: |
        docker compose restart nginx
      shell: bash
